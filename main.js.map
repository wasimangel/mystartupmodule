{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/register/stepper/stepper.component.css","webpack:///./src/app/register/stepper/stepper.component.html","webpack:///./src/app/register/stepper/stepper.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,4E;;;;;;;;;;;ACZA,2BAA2B,2DAA2D,uBAAuB,GAAG,G;;;;;;;;;;;ACAhH,+M;;;;;;;;;;;;;;;;;;;;;ACA0C;AAO1C;IALA;QAME,UAAK,GAAG,KAAK,CAAC;IAChB,CAAC;IAFY,YAAY;QALxB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;;;SAGrB,CAAC;OACW,YAAY,CAExB;IAAD,mBAAC;CAAA;AAFwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACP+B;AACjB;AAEM;AACc;AAC0E;AACrE;AACM;AACO;AA0B7E;IAAA;IACA,CAAC;IADY,SAAS;QAvBrB,8DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,2DAAY;gBACZ,oFAAgB;aACjB;YACD,OAAO,EAAE;gBACP,uEAAa;gBACb,0EAAgB;gBAChB,oEAAkB;gBAClB,gEAAc;gBACd,kEAAmB;gBACnB,+DAAa;gBACb,+DAAa;gBACb,4FAAuB;gBACvB,+DAAa,EAAE,iEAAe;gBAC9B,0DAAW;gBACX,oEAAkB;gBAClB,gEAAc,EAAE,iEAAe;aAEhC;YACD,SAAS,EAAE,EAAE;YACb,SAAS,EAAE,CAAC,2DAAY,CAAC;SAC1B,CAAC;OACW,SAAS,CACrB;IAAD,gBAAC;CAAA;AADqB;;;;;;;;;;;;AClCtB,4BAA4B,kBAAkB,kBAAkB,4BAA4B,wBAAwB,KAAK,G;;;;;;;;;;;ACAzH,yaAAya,uTAAuT,qTAAqT,yTAAyT,qTAAqT,qTAAqT,kmBAAkmB,4RAA4R,oSAAoS,kSAAkS,8RAA8R,4RAA4R,y3BAAy3B,SAAS,qaAAqa,WAAW,8hBAA8hB,YAAY,mhBAAmhB,UAAU,miBAAmiB,cAAc,s4B;;;;;;;;;;;;;;;;;;;;;;;;;ACAhzN;AACgD;AA4BhG;IAyCE,0BAAoB,YAAyB;QAAzB,iBAAY,GAAZ,YAAY,CAAa;QAvC7C,uBAAkB,GAAG,IAAI,0DAAW,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;QAChE,gBAAW,GAAkB;YAC3B,EAAC,IAAI,EAAE,OAAO,EAAC;YACf,EAAC,IAAI,EAAE,UAAU,EAAC;YAClB,EAAC,IAAI,EAAE,YAAY,EAAC;YACpB,EAAC,IAAI,EAAE,QAAQ,EAAC;SACjB,CAAC;QACF,oBAAe,GAAG,IAAI,0DAAW,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC7D,aAAQ,GAAe;YACrB,EAAC,IAAI,EAAE,IAAI,EAAC;YACZ,EAAC,IAAI,EAAE,QAAQ,EAAC;YAChB,EAAC,IAAI,EAAE,WAAW,EAAC;YACnB,EAAC,IAAI,EAAE,OAAO,EAAC;SAChB,CAAC;QACF,kBAAa,GAAG,IAAI,0DAAW,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC3D,WAAM,GAAa;YACjB,EAAC,IAAI,EAAE,sBAAsB,EAAC;YAC9B,EAAC,IAAI,EAAE,OAAO,EAAC;SAChB,CAAC;QACF,mBAAc,GAAG,IAAI,0DAAW,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC5D,gBAAW,GAAkB;YAC3B,EAAC,IAAI,EAAE,OAAO,EAAC;YACf,EAAC,IAAI,EAAE,gBAAgB,EAAC;SACzB,CAAC;QACF,aAAQ,GAAG,IAAI,0DAAW,EAAE,CAAC;QAC7B,gBAAW,GAAa,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;IAe9C,CAAC;IALD,sBAAI,uCAAS;QADb,qDAAqD;aACrD;YACE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QACzC,CAAC;;;OAAA;IAKD,mCAAQ,GAAR;QACE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CACtC;YACA,SAAS,EAAE,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;gBACjC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;oBACtB,eAAe,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;oBAC1C,eAAe,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;oBAC1C,iBAAiB,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;oBAC5C,eAAe,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;oBAC1C,YAAY,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;oBACvC,OAAO,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;iBACnC,CAAC;gBACF,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;oBACtB,YAAY,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC;oBAC9B,YAAY,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC;oBAC9B,WAAW,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;oBACtC,SAAS,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;oBACpC,QAAQ,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;oBACnC,YAAY,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;iBACxC,CAAC;gBACF,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;oBACtB,eAAe,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;oBAC1C,mBAAmB,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;oBAC9C,gBAAgB,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;oBAC3C,cAAc,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;oBACzC,YAAY,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;iBACxC,CAAC;aACH,CAAC;SACH,CAAC,CAAC;QAEH,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;YACnD,eAAe,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC;YACjC,eAAe,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC;YACjC,iBAAiB,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC;YACnC,eAAe,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YAC1C,YAAY,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YACvC,OAAO,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;SACnC,CAAC,CAAC;QAEH,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;YAC9C,YAAY,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC;YAC9B,YAAY,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC;YAC9B,WAAW,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YACtC,SAAS,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YACpC,QAAQ,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YACnC,YAAY,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;SACxC,CAAC,CAAC;QACH,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;YAC9C,eAAe,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YAC1C,mBAAmB,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YAC9C,gBAAgB,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YAC3C,cAAc,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YACzC,YAAY,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;SACxC,CAAC,CAAC;QACH,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;YAC9C,WAAW,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;SACvC,CAAC,CAAC;IACL,CAAC;IArGU,gBAAgB;QAL5B,+DAAS,CAAC;YACT,QAAQ,EAAE,aAAa;;;SAGxB,CAAC;yCA0CkC,0DAAW;OAzClC,gBAAgB,CAsG5B;IAAD,uBAAC;CAAA;AAtG4B;;;;;;;;;;;;;;AC7B7B;AAAA,gFAAgF;AAChF,2EAA2E;AAC3E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;GAKG;AACH,mEAAmE;;;;;;;;;;;;;;;;;;ACdpB;AAC4B;AAE9B;AACY;AAEzD,EAAE,CAAC,CAAC,qEAAW,CAAC,UAAU,CAAC,CAAC,CAAC;IAC3B,oEAAc,EAAE,CAAC;AACnB,CAAC;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAhB,CAAgB,CAAC,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \".myclass{\\n  background-image: url(\\\"/assets/images/splashbg.jpg\\\");\\n  text-align: center;\\n}\\n\"","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\n<div class=\\\"myclass\\\">\\n  <mat-card-content>\\n    <app-stepper></app-stepper>\\n\\n  </mat-card-content>\\n</div>\\n\\n\\n\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'app';\n}\n","import {BrowserModule} from '@angular/platform-browser';\nimport {NgModule} from '@angular/core';\n\nimport {AppComponent} from './app.component';\nimport {MatStepperModule} from '@angular/material/stepper';\nimport {MatButtonModule, MatCardModule, MatFormFieldModule, MatIconModule, MatInputModule, MatSelectModule} from '@angular/material';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {StepperComponent} from './register/stepper/stepper.component';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    StepperComponent\n  ],\n  imports: [\n    BrowserModule,\n    MatStepperModule,\n    MatFormFieldModule,\n    MatInputModule,\n    ReactiveFormsModule,\n    MatIconModule,\n    MatIconModule,\n    BrowserAnimationsModule,\n    MatCardModule, MatButtonModule,\n    FormsModule,\n    MatFormFieldModule,\n    MatInputModule, MatSelectModule\n\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n","module.exports = \".main-div{\\n  height: 100vh;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n\\n}\\n\"","module.exports = \"\\n<div class=\\\"main-div\\\">\\n  <mat-card>\\n    <form [formGroup]=\\\"formGroup\\\">\\n      <mat-horizontal-stepper #linearHStepper=\\\"matHorizontalStepper\\\" formArrayName=\\\"formArray\\\" [linear]=\\\"false\\\">\\n        <mat-step formGroupName=\\\"0\\\" [stepControl]=\\\"formArray?.get([0])\\\">\\n          <ng-template matStepLabel>Organisation</ng-template>\\n          <div>\\n            <mat-form-field style=\\\"width: 100%;\\\">\\n              <mat-label>Company Name </mat-label>\\n              <input matInput formControlName=\\\"companyNameCtrl\\\" required>\\n              <mat-error>This field is required</mat-error>\\n            </mat-form-field>\\n          </div>\\n\\n          <div>\\n            <mat-form-field style=\\\"width: 100%;\\\">\\n              <mat-label>Company Size </mat-label>\\n              <input matInput formControlName=\\\"companySizeCtrl\\\" required>\\n              <mat-error>This field is required</mat-error>\\n            </mat-form-field>\\n          </div>\\n          <div>\\n            <mat-form-field style=\\\"width: 100%;\\\">\\n              <mat-label>Contact Person </mat-label>\\n              <input matInput formControlName=\\\"companypersonCtrl\\\" required>\\n              <mat-error>This field is required</mat-error>\\n            </mat-form-field>\\n          </div>\\n          <div>\\n            <mat-form-field style=\\\"width: 100%;\\\">\\n              <mat-label>Phone Number </mat-label>\\n              <input matInput formControlName=\\\"phomeNumberCtrl\\\" required>\\n              <mat-error>This field is required</mat-error>\\n            </mat-form-field>\\n          </div>\\n          <div>\\n            <mat-form-field style=\\\"width: 100%;\\\">\\n              <mat-label>LandLine Number </mat-label>\\n              <input matInput formControlName=\\\"landLineCtrl\\\" required>\\n              <mat-error>This field is required</mat-error>\\n            </mat-form-field>\\n          </div>\\n          <div>\\n            <mat-form-field style=\\\"width: 100%;\\\">\\n              <mat-label> GST No </mat-label>\\n              <input matInput formControlName=\\\"GstCtrl\\\" required>\\n              <mat-error>This field is required</mat-error>\\n            </mat-form-field>\\n          </div>\\n          <div>\\n            <button mat-raised-button color=\\\"primary\\\" matStepperNext>Next</button>\\n          </div>\\n        </mat-step>\\n        <mat-step formGroupName=\\\"1\\\" [stepControl]=\\\"formArray?.get([1])\\\">\\n          <ng-template matStepLabel>\\n            <div>Address</div>\\n          </ng-template>\\n          <div>\\n          <mat-form-field style=\\\"width: 100%;\\\">\\n            <mat-label>Office No </mat-label>\\n            <input matInput formControlName=\\\"officeNOCtrl\\\" >\\n            <mat-error>The input is invalid.</mat-error>\\n          </mat-form-field>\\n          </div>\\n          <div>\\n          <mat-form-field style=\\\"width: 100%;\\\">\\n            <mat-label> Landmark </mat-label>\\n            <input matInput formControlName=\\\"landmarkCtrl\\\" required>\\n            <mat-error>The input is invalid.</mat-error>\\n          </mat-form-field>\\n          </div>\\n          <div>\\n          <mat-form-field style=\\\"width: 100%;\\\">\\n            <mat-label> Country </mat-label>\\n            <input matInput formControlName=\\\"countryCtrl\\\" required>\\n            <mat-error>The input is invalid.</mat-error>\\n          </mat-form-field>\\n          </div>\\n          <div>\\n          <mat-form-field style=\\\"width: 100%;\\\">\\n            <mat-label> State </mat-label>\\n            <input matInput formControlName=\\\"stateCtrl\\\" required>\\n            <mat-error>The input is invalid.</mat-error>\\n          </mat-form-field>\\n          </div>\\n          <div>\\n          <mat-form-field style=\\\"width: 100%;\\\">\\n            <mat-label> City </mat-label>\\n            <input matInput formControlName=\\\"cityCtrl\\\" required>\\n            <mat-error>The input is invalid.</mat-error>\\n          </mat-form-field>\\n          </div>\\n          <div>\\n          <mat-form-field style=\\\"width: 100%;\\\">\\n            <mat-label> Area Code </mat-label>\\n            <input matInput formControlName=\\\"areaCodeCtrl\\\" required>\\n            <mat-error>The input is invalid.</mat-error>\\n          </mat-form-field>\\n          </div>\\n          <div>\\n            <button mat-raised-button color=\\\"primary\\\" matStepperPrevious>Back</button>\\n            <button mat-raised-button  color=\\\"primary\\\" matStepperNext>Next</button>\\n          </div>\\n        </mat-step>\\n        <mat-step formGroupName=\\\"2\\\" [stepControl]=\\\"formArray?.get([2])\\\">\\n          <ng-template matStepLabel>\\n            <div>Product</div>\\n          </ng-template>\\n          <div>\\n            <mat-form-field style=\\\"width: 100%\\\">\\n              <mat-select placeholder=\\\"Select Product\\\" [formControl]=\\\"toppings\\\" multiple>\\n                <mat-option *ngFor=\\\"let topping of toppingList\\\" [value]=\\\"topping\\\">{{topping}}</mat-option>\\n              </mat-select>\\n            </mat-form-field>\\n\\n          </div>\\n          <div>\\n            <mat-form-field style=\\\"width: 100%\\\">\\n              <mat-select placeholder=\\\"Select Product Plan\\\" [formControl]=\\\"productPlanControl\\\" required>\\n                <mat-option>--</mat-option>\\n                <mat-option *ngFor=\\\"let plan of productPlan\\\" [value]=\\\"plan\\\">\\n                  {{plan.name}}\\n                </mat-option>\\n              </mat-select>\\n              <mat-error *ngIf=\\\"productPlanControl.hasError('required')\\\">Please choose a Plan</mat-error>\\n\\n            </mat-form-field>\\n\\n          </div>\\n          <div>\\n            <mat-form-field style=\\\"width: 100%\\\">\\n              <mat-select placeholder=\\\"Select Industry\\\" [formControl]=\\\"industryControl\\\" required>\\n                <mat-option>--</mat-option>\\n                <mat-option *ngFor=\\\"let indus of industry\\\" [value]=\\\"indus\\\">\\n                  {{indus.name}}\\n                </mat-option>\\n              </mat-select>\\n              <mat-error *ngIf=\\\"industryControl.hasError('required')\\\">Please choose a Industry</mat-error>\\n\\n            </mat-form-field>\\n          </div>\\n          <div>\\n            <mat-form-field style=\\\"width: 100%\\\">\\n              <mat-select placeholder=\\\"Select Domain\\\" [formControl]=\\\"domainControl\\\" required>\\n                <mat-option>--</mat-option>\\n                <mat-option *ngFor=\\\"let dom of domain\\\" [value]=\\\"dom\\\">\\n                  {{dom.name}}\\n                </mat-option>\\n              </mat-select>\\n              <mat-error *ngIf=\\\"domainControl.hasError('required')\\\">Please choose a Industry</mat-error>\\n\\n            </mat-form-field>          </div>\\n          <div>\\n            <mat-form-field style=\\\"width: 100%\\\">\\n              <mat-select placeholder=\\\"Select Product Type\\\" [formControl]=\\\"productControl\\\" required>\\n                <mat-option>--</mat-option>\\n                <mat-option *ngFor=\\\"let proType of productType\\\" [value]=\\\"proType\\\">\\n                  {{proType.name}}\\n                </mat-option>\\n              </mat-select>\\n              <mat-error *ngIf=\\\"productControl.hasError('required')\\\">Please choose Product Type</mat-error>\\n\\n            </mat-form-field>          </div>\\n          <div>\\n            <button style=\\\"margin-right: 20%\\\" mat-raised-button color=\\\"primary\\\" matStepperPrevious>Back</button>\\n\\n            <button style=\\\"margin-left: 20%\\\" mat-raised-button  color=\\\"primary\\\" matStepperNext>Next</button>\\n          </div>\\n        </mat-step>\\n        <mat-step>\\n          <ng-template matStepLabel>Payment</ng-template>\\n          Everything seems correct.\\n          <div>\\n            <button mat-button>Done</button>\\n            <button type=\\\"button\\\" mat-button (click)=\\\"linearHStepper.reset()\\\">Reset</button>\\n          </div>\\n        </mat-step>\\n      </mat-horizontal-stepper>\\n    </form>\\n\\n\\n  </mat-card>\\n</div>\\n\"","import {Component, OnInit} from '@angular/core';\nimport {AbstractControl, FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\n\nexport interface ProductPlan {\n  name: string;\n\n}\n\n\nexport interface Industry {\n  name: string;\n\n}\nexport interface Domain {\n  name: string;\n\n}\nexport interface ProductType {\n  name: string;\n\n}\n\n\n\n@Component({\n  selector: 'app-stepper',\n  templateUrl: './stepper.component.html',\n  styleUrls: ['./stepper.component.css']\n})\nexport class StepperComponent implements OnInit {\n\n  productPlanControl = new FormControl('', [Validators.required]);\n  productPlan: ProductPlan[] = [\n    {name: 'Basic'},\n    {name: 'Advanced'},\n    {name: 'Enterprise'},\n    {name: 'Custom'},\n  ];\n  industryControl = new FormControl('', [Validators.required]);\n  industry: Industry[] = [\n    {name: 'IT'},\n    {name: 'Retail'},\n    {name: 'Mechnical'},\n    {name: 'Other'}\n  ];\n  domainControl = new FormControl('', [Validators.required]);\n  domain: Domain[] = [\n    {name: 'Software Development'},\n    {name: 'Other'}\n  ];\n  productControl = new FormControl('', [Validators.required]);\n  productType: ProductType[] = [\n    {name: 'Trial'},\n    {name: 'Premium (Paid)'}\n  ];\n  toppings = new FormControl();\n  toppingList: string[] = ['HRM', 'CRM', 'ERP'];\n\n  formGroup: FormGroup;\n\n  organisationFormGroup: FormGroup;\n  addressFormGroup: FormGroup;\n  productFormGroup: FormGroup;\n  paymentFormGroup: FormGroup;\n\n  /** Returns a FormArray with the name 'formArray'. */\n  get formArray(): AbstractControl | null {\n    return this.formGroup.get('formArray');\n  }\n\n  constructor(private _formBuilder: FormBuilder) {\n  }\n\n  ngOnInit() {\n    this.formGroup = this._formBuilder.group(\n      {\n      formArray: this._formBuilder.array([\n        this._formBuilder.group({\n          companyNameCtrl: ['', Validators.required],\n          companySizeCtrl: ['', Validators.required],\n          companypersonCtrl: ['', Validators.required],\n          phomeNumberCtrl: ['', Validators.required],\n          landLineCtrl: ['', Validators.required],\n          GstCtrl: ['', Validators.required]\n        }),\n        this._formBuilder.group({\n          officeNOCtrl: ['', Validators],\n          landmarkCtrl: ['', Validators],\n          countryCtrl: ['', Validators.required],\n          stateCtrl: ['', Validators.required],\n          cityCtrl: ['', Validators.required],\n          areaCodeCtrl: ['', Validators.required],\n        }),\n        this._formBuilder.group({\n          productformCtrl: ['', Validators.required],\n          productPlanformCtrl: ['', Validators.required],\n          industryformCtrl: ['', Validators.required],\n          domainformCtrl: ['', Validators.required],\n          typeformCtrl: ['', Validators.required]\n        }),\n      ])\n    });\n\n    this.organisationFormGroup = this._formBuilder.group({\n      companyNameCtrl: ['', Validators],\n      companySizeCtrl: ['', Validators],\n      companypersonCtrl: ['', Validators],\n      phomeNumberCtrl: ['', Validators.required],\n      landLineCtrl: ['', Validators.required],\n      GstCtrl: ['', Validators.required]\n    });\n\n    this.addressFormGroup = this._formBuilder.group({\n      officeNOCtrl: ['', Validators],\n      landmarkCtrl: ['', Validators],\n      countryCtrl: ['', Validators.required],\n      stateCtrl: ['', Validators.required],\n      cityCtrl: ['', Validators.required],\n      areaCodeCtrl: ['', Validators.required],\n    });\n    this.productFormGroup = this._formBuilder.group({\n      productformCtrl: ['', Validators.required],\n      productPlanformCtrl: ['', Validators.required],\n      industryformCtrl: ['', Validators.required],\n      domainformCtrl: ['', Validators.required],\n      typeformCtrl: ['', Validators.required]\n    });\n    this.productFormGroup = this._formBuilder.group({\n      newformCtrl: ['', Validators.required]\n    });\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}